[directives]
    [directives.force_single_line]
        description = "Force statements to be on a single line rather than spread across multiple"
        regex_match = "[ ]+\\n?([+,])\\n?[ ]+"
        regex_replace = " \\1"
    [directives.strip_comments]
        description = "Remove any comments from the code"
        regex_match = "(.*)#.*"
        regex_replace = "\\1"
    [directives.redecorate]
        description = "Expand decorators around functions"
        regex_match = "(\\s*)@([a-zA-Z_][-a-zA-Z0-9_]+)(\\((.+)\\))?\\n\\1(def\\s+([-a-zA-Z_][-a-zA-Z0-9_]*)\\((.*)\\)(\\s*->\\s*[a-zA-Z_][-a-zA-Z0-9_]+)?\\s*:\\n((\\1\\s{4}.*\\n)+)\\n)" # TODO somehow allow tab width setting aha(prepreprocess config step) BUILD REGEX FROM PARTS, eg function def and then so-on
        regex_replace = "\\1\\5\\n\\1\\2(\\6, \\4)\n"
        # TODO sub strings for regex, e.g. clarity for function name matching, continually indented statements etc.
    [directives.redecorate_clean]
        description = "the regex_replace for redecorate can leave messy commas for decorators with no parameters"
        regex_match = "([a-zA-Z_][-a-zA-Z0-9_]+)\\(((,?\\s*(([a-zA-Z_][-a-zA-Z0-9_]+)|(['\\\"].*['\\\"]))\\s*)+),\\s*\\)"
        regex_replace = "\\1(\\2)"
    [directives.strip_empty_lines]
        description = "Removes any empty lines"
        regex_match = "\\n\\s*\\n"
        regex_replace = "\n"

[selectors]
    [selectors.function]
        description = "Selects functions"
        regex_match = "(\\s*)(def\\s+([a-zA-Z_][-a-zA-Z0-9_]+)\\((.+)?\\)(\\s*->\\s*([a-zA-Z_][-a-zA-Z0-9_]+))?\\s*:\\n((\\1\\s{4}.*\\n)+))"
        top_level_selector = true
        name = 2
        parameters = 3
        body = 6
        explicit_type = 5
        subselectors = ["function", "class", "statement"]
    [selectors.parameter]
        description = "Selects information pertaining to parameters"
        regex_match = "(([a-zA-Z_][-a-zA-Z0-9_]+)\\s*(:\\s*([a-zA-Z_][-a-zA-Z0-9_]+))?(\\s*=\\s*([a-zA-Z_][-a-zA-Z0-9_]+|[\\\"'].*[\\\"']|[0-9]*(\\.[0-9]+)?))?,?\\s*)"
        top_level_selector = false
        name = 1
        type = 3
        default_value = 5
    [selectors.class]
        description = "Selects classes"
        regex_match = "(\\s*)?class\\s+([a-zA-Z_][-a-zA-Z0-9_]+)(\\((.+)?\\))?:\\n((\\1\\s{4}.*\\n)+)"
        name = 1
        body = 4
        subclasses = 3
        top_level_selector = true
        subselectors = ["attribute", "class", "function"]
    [selectors.attribute]
        description = "selects attributes of classes"
        regex_match = "nsjvigubksj"

[info]
    description = "Support for the python3 language"
    file_extensions = [".py", ".pyw"]
    sources = []