[snippets]
    [snippets.name]
        regex = "[a-zA-Z_][-a-zA-Z0-9_]+"
    [snippets.comment]
        regex = "#.*"
    [snippets.multiline_statement]
        regex = "[ \t]+\\n?([+,])\\n?[ \t]+"
    [snippets.empty_line]
        regex = "\\n\\s*\\n"
    [snippets.statement]
        regex = "(\\1\\s{4}.*\\n)"

[format_strings]
    [format_strings.decorator]
        regex = "@({{name}})"
    [format_strings.commented_line]
        regex = "(.*){{comment}}"
    [format_strings.return_type]
        regex = "\\s*->\\s*({{name}})"
    [format_strings.function]
        regex = "(\\s*)(def\\s+({{name}})\\((.+)?\\)({{return_type}})?\\s*:\\n({{statement}}+))"
        dependencies = ["return_type"]
    [format_strings.decorated_function]
        regex = "(\\s*)@({{name}})(\\((.+)\\))?\\n\\1({{function}}\\n)"
        dependencies = ["function"]
    [format_strings.decorator_call]
        regex = "({{name}})\\(((,?\\s*(({{name}})|(['\\\"].*['\\\"]))\\s*)+),\\s*\\)"
    [format_strings.parameter]
        regex = "(({{name}})\\s*(:\\s*({{name}}))?(\\s*=\\s*({{name}}|[\\\"'].*[\\\"']|[0-9]*(\\.[0-9]+)?))?,?\\s*)"
    [format_strings.class]
        regex = "(\\s*)?class\\s+({{name}})(\\((.+)?\\))?:\\n({{statement}}+)"


[directives]
    [directives.force_single_line]
        description = "Force statements to be on a single line rather than spread across multiple"
        regex_format_string = "multiline_statement"
        regex_replace = " \\1"
    [directives.strip_comments]
        description = "Remove any comments from the code"
        regex_format_string = "commented_line"
        regex_replace = "\\1"
    [directives.redecorate]
        description = "Expand decorators around functions"
        regex_format_string = "decorated_function"
        regex_replace = "\\1\\5\\n\\1\\2(\\6, \\4)\n"
        # TODO sub strings for regex, e.g. clarity for function name matching, continually indented statements etc.
    [directives.redecorate_clean]
        description = "the regex_replace for redecorate can leave messy commas for decorators with no parameters"
        regex_format_string = "decorator_call"
        regex_replace = "\\1(\\2)"
    [directives.strip_empty_lines]
        description = "Removes any empty lines"
        regex_format_string = "empty_line"
        regex_replace = "\n"

[selectors]
    [selectors.function]
        description = "Selects functions"
        regex_format_string = "function"
        top_level_selector = true
        name = 2
        parameters = 3
        body = 6
        explicit_type = 5
        subselectors = ["function", "class", "statement"]
    [selectors.parameter]
        description = "Selects information pertaining to parameters"
        regex_format_string = "parameter"
        top_level_selector = false
        name = 1
        type = 3
        default_value = 5
    [selectors.class]
        description = "Selects classes"
        regex_format_string = "class"
        name = 1
        body = 4
        subclasses = 3
        top_level_selector = true
        subselectors = ["attribute", "class", "function"]

[info]
    description = "Support for the python3 language"
    file_extensions = [".py", ".pyw"]
    sources = []